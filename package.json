{
  "name": "discord-forward-blocker",
  "version": "1.0.0",
  "description": "Discord bot to block forwarded messages for early roles",
  "main": "bot.js",
  "type": "module",
  "scripts": {
    "start": "node bot.js"
  },
  "dependencies": {
    "discord.js": "^14.11.0",
    "dotenv": "^16.3.1",
    "express": "^4.18.2"
  }
}
import { Client, GatewayIntentBits, Events } from 'discord.js';
import express from 'express';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

// Setup __dirname for ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load .env file
dotenv.config({ path: path.join(__dirname, '.env') });

// Initialize Discord client
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ]
});

// Role IDs to block
const BLOCKED_ROLE_IDS = [
  "1399135278396080238", // First-Time Believer
  "1399992492568350794", // Blessed Cutie
  "1399993506759573616"  // Angel in Training
];

// When bot is ready
client.once(Events.ClientReady, () => {
  console.log(`🚀 Logged in as ${client.user.tag}`);
});

// On every message
client.on(Events.MessageCreate, async (message) => {
  if (message.author.bot || !message.guild) return;

  console.log(`📨 Message received: "${message.content}" from ${message.author.username} in #${message.channel.name}`);
  console.log(`📝 Message type: ${message.type}`);

  // Skip messages that have content
  if (message.content && message.content.trim().length > 0) return;

  try {
    const member = await message.guild.members.fetch(message.author.id);
    const hasBlockedRole = BLOCKED_ROLE_IDS.some(roleId => member.roles.cache.has(roleId));

    if (hasBlockedRole) {
      await message.delete();
      console.log("❌ Deleted empty message from restricted role.");
    }
  } catch (err) {
    console.error("⚠️ Failed to delete message:", err.message);
  }
});

// Express web server to keep Render service alive
const app = express();
app.get('/', (_, res) => res.send('Bot is running!'));

app.listen(3000, () => console.log('🌐 Keep-alive webserver running'));

// Start bot
client.login(process.env.TOKEN);